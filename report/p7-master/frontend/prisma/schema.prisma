// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgres"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? //@db.Text
    access_token      String? //@db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? //@db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    role       Role         @relation(fields: [roleName], references: [name])
    roleName   String       @default("student")
    Submission Submission[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// This should have been an enum. Like:
// enum Role {
//     student
//     teacher
//}
model Role {
    name String @id

    users User[]
}

model Submission {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    code      String
    success   Boolean
    output    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    problem   Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)
    problemId String
}

model Syllabus {
    name String @id @unique

    ProblemSets ProblemSet[]
}

model ProblemSet {
    id       String    @id @default(cuid())
    topic    String
    date     DateTime
    Problems Problem[]

    syllabus     Syllabus @relation(fields: [syllabusName], references: [name], onDelete: Cascade)
    syllabusName String
}

model Problem {
    id           String       @id @default(cuid())
    name         String
    template     String
    description  String
    Tests        Test[]
    problemSet   ProblemSet   @relation(fields: [problemSetId], references: [id], onDelete: Cascade)
    problemSetId String
    Submission   Submission[]
}

model Test {
    problem   Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
    problemId String  @id
    code      String
}
