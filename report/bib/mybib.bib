@booklet{Madsen2010,
  author       = {Lars Madsen},
  title        = {Introduktion til {LaTeX}},
  year         = {2010},
  howpublished = {\url{http://www.imf.au.dk/system/latex/bog/}}
}

@book{Sommerville10,
    author = {Sommerville, Ian},
    publisher = {Pearson},
    title = {Software Engineering},
    year = 2010,
    isbn={978-1-292-09613-1},
    chapter=8,
    pages={248}
}

@ARTICLE{OperationalProfiles,
  author={Musa, J.D.},
  journal={IEEE Software},
  title={Operational profiles in software-reliability engineering}, 
  year={1993},
  volume={10},
  number={2},
  pages={14-32},
  doi={10.1109/52.199724}
}

@Article{reliabilityAvailability,
  author={Immonen, Anne
  and Niemel{\"a}, Eila},
  title={Survey of reliability and availability prediction methods from the viewpoint of software architecture},
  journal={Software {\&} Systems Modeling},
  year={2008},
  month={Feb},
  day={01},
  volume={7},
  number={1},
  pages={49-65},
  abstract={Many future software systems will be distributed across a network, extensively providing different kinds of services for their users. These systems must be highly reliable and provide services when required. Reliability and availability must be engineered into software from the onset of its development, and potential problems must be detected in the early stages, when it is easier and less expensive to implement modifications. The software architecture design phase is the first stage of software development in which it is possible to evaluate how well the quality requirements are being met. For this reason, a method is needed for analyzing software architecture with respect to reliability and availability. In this paper, we define a framework for comparing reliability and availability analysis methods from the viewpoint of software architecture. Our contribution is the comparison of the existing analysis methods and techniques that can be used for reliability and availability prediction at the architectural level. The objective is to discover which methods are suitable for the reliability and availability prediction of today's complex systems, what are the shortcomings of the methods, and which research activities need to be conducted in order to overcome these identified shortcomings. The comparison reveals that none of the existing methods entirely fulfill the requirements that are defined in the framework. The comparison framework also defines the characteristics required of new reliability and availability analysis methods. Additionally, the framework is a valuable tool for selecting the best suitable method for architecture analysis. Furthermore, the framework can be extended and used for other evaluation methods as well.},
  issn={1619-1374},
  doi={10.1007/s10270-006-0040-x},
  url={https://doi.org/10.1007/s10270-006-0040-x}
}





@online{Codecademy,
  title   = {Codecademy},
  url     = {https://www.codecademy.com/learn},
  urldate = {2022-10-5}
}

@online{Benchmarkdotnet,
  title   = {Benchmarkdotnet},
  url     = {https://benchmarkdotnet.org/},
  urldate = {2022-25-11}
}

@online{Codewars,
  title   = {Codewars},
  url     = {hhttps://www.codewars.com/dashboard},
  urldate = {2022-10-5}
}

@online{Coursera,
  title   = {Coursera},
  url     = {https://www.coursera.org},
  urldate = {2022-10-5}
}


@online{Docker_Container,
  title   = {Docker},
  url     = {https://www.docker.com/resources/what-container},
  urldate = {2022-10-27}
}

@online{Rust_Book,
  title   = {The Rust Programming Language},
  url     = {https://docs.docker.com},
  urldate = {2022-10-27}
}

@online{Safe_Systems_Languages,
  title   = {We need a safer systems programming language},
  url     = {https://msrc-blog.microsoft.com/2019/07/18/we-need-a-safer-systems-programming-language/},
  urldate = {2022-10-27}
}

@book{Rust_in_Action,
  title      = {Rust in Action},
  author     = {Tim McNamara},
  date       = {2021},
  publisher  = {{Manning}},
  isbn       = {9781617294556},
  pagetotal  = {465},
}

@online{Haskell_GHC,
  title   = {Glasgow Haskell Compiler},
  url     = {https://www.haskell.org/ghc/},
  urldate = {2022-10-27}
}

@online{tRPC,
  title   = {tRPC documentation},
  url     = {https://trpc.io/docs/v10/},
  urldate = {2022-10-27}
}

@online{Prisma_Doc,
  title   = {What is Prisma},
  url     = {https://www.prisma.io/docs/concepts/overview/what-is-prisma},
  urldate = {2022-10-27}
}

@online{Prisma_Why,
  title   = {Why Prisma?},
  url     = {https://www.prisma.io/docs/concepts/overview/why-prisma},
  urldate = {2022-10-27}
}

@online{TypeScript,
  title   = {TypeScript},
  url     = {https://www.typescriptlang.org},
  urldate = {2022-11-2}
}

@online{JavaScript_Mozilla,
  title   = {What is JavaScript?},
  url     = {https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/What_is_JavaScript},
  urldate = {2022-11-2}
}

@online{Nextjs_Docks,
  title   = {What is Next.js?},
  url     = {https://nextjs.org/learn/foundations/about-nextjs/what-is-nextjs},
  urldate = {2022-11-2}
}

@online{Postgres_Docs,
  title   = {What is PostgreSQL?},
  url     = {https://www.postgresql.org/about/},
  urldate = {2022-11-3}
}

@misc{deb7,
  author  = {Anders Bruun},
  title   = {DEB 7: Evaluation - What is Usability and Usability Testing},
  month   = {October},
  year    = {2020},
  location= {Aalborg University}
}


@online{adobeSUS,
  title   = {The System Usability Scale And How It's Used in UX},
  url     = {https://xd.adobe.com/ideas/process/user-testing/sus-system-usability-scale-ux/},
  urldate = {2022-11-30}
}